## https://github.com/edubxb/dotfiles/blob/master/.config/bash/functions
## Fuzzy add to stage - git
function fas {
  local files

  git rev-parse HEAD &> /dev/null || return
  files=$(git -c color.status=always status --short)
  [[ -n "${files}" ]] || return
  target=$(fzf --border --height 100% --no-hscroll -n 2.. -m --ansi \
               --preview-window bottom:75% \
               --preview 'FILE=$(cut -d" " -f 2 <<< {2..}); git diff --color=always --exit-code "${FILE}" && git diff --color=always --staged "${FILE}"' \
               --bind 'ctrl-o:execute-silent(xdg-open $(cut -d" " -f 1 <<< {2..}))' \
               --bind 'ctrl-t:execute-silent(git difftool $(cut -d" " -f 1 <<< {2..}))' \
               <<< "${files}" | sed -E 's/^ ?. (.+)/\1/') || return

  [[ -n "${target}" ]] && git add ${target}
}

## Fuzzy OKta credentials - Get AWS temp credentials through Okta
function fok {
  local target
  local okta_file="$OKTA_CONFIG"
  target=$(sed -nE "s/^\[([^DEFAULT].*)\]$/\1/p" "${okta_file}" 2> /dev/null |
           fzf --min-height 10 --height 15 -q "$*") || return  
  gimme-aws-creds -p "${target}"
}

## Fuzzy Project finder
function fp {
  local directory_list="$(tr ":" " " <<< ${PROJECTS_PATH})"
  local projects=$(
    for path in ${directory_list}; do
      echo ${path}/* | sed "s|$HOME/||g" | tr ' ' '\n' | sed -E 's|([^ ]+)/([^/]+)|\\e[3m\1\\e[0m \2|'
    done
  )
  target=( $(echo -en "${projects}" |
           fzf --height 35% --no-hscroll -n 2 --ansi -1 -q "$*") ) || return
  cd "${HOME}/${target[0]}/${target[1]}"
}

## Fuzzy Environment Variables finder
function fev {
  compgen -v | sort | fzf --height 11 +s --no-border \
                          --preview-window right:80%:wrap \
                          --preview 'printenv {}' \
                          -q "$*"
}


function __awless_show {
  local lock_file
  lock_file="/tmp/awless-show.lock"
  [[ -f "${lock_file}" ]] && return
  awless show -p $1 --silent --local --siblings --color=always $2 2> /dev/null
  if [[ "$?" -ne 0 ]]; then
    touch "${lock_file}" &> /dev/null
    awless sync -p $1 --silent --infra 2> /dev/null
    rm -f "${lock_file}" &> /dev/null
    awless sync -p $1 --silent --local --siblings --color=always $2 2> /dev/null
  fi
}
typeset -fx __awless_show

function ec2sh {
  local profile

  if [[ -n "$1" ]]; then
    profile="$1"
  elif [[ -n "${AWS_PROFILE}" ]]; then
    profile="${AWS_PROFILE}"
  else
    echo 'No AWS credentials found in the environment!'
    return
  fi

  shift

  local target
  local host
  local instance
  local msg
  local address_idx=2

  _IFS="${IFS}"
  IFS=$'\n'
  target=( $(awless ls instances -p "${profile}" --silent --format tsv --no-headers \
                    --columns "id,name,private ip,public ip,state,uptime" \
                    --sort name,uptime --filter state=running |
             fzf --sync --no-hscroll --tabstop=1 -d $'\t' --multi \
                 --with-nth 1..4 --nth 1,2 \
                 --expect=enter --expect=alt-enter --expect=ctrl-space\
                 --bind 'ctrl-t:toggle-all' \
                 --preview-window right:60%:wrap \
                 --preview "__awless_show ${profile} {1}" \
                 --prompt " ${profile} ‚ùØ " --ansi -q "$*" | cut -f 1,3,4 --output-delimiter=";") )
  IFS="${_IFS}"

  if [[ -n "${target}" ]]; then
    key_bind="${target[0]}"
    instances=( "${target[@]:1}" )
    if [[ ${key_bind} = 'ctrl-space' ]]; then
      for instance in "${instances[@]:1}"; do
        tilix -a session-add-down \
              -e "aws --profile ${profile} ssm start-session --target $(cut -d ";" -f 1 <<< ${instance})"
      done
      aws --profile "${profile}" ssm start-session --target $(cut -d ";" -f 1 <<< ${instances[0]})
    else
      [[ ${key_bind} = 'alt-enter' ]] && address_idx=3
       for instance in "${instances[@]:1}"; do
          tilix -a session-add-down -e "ssh $(cut -d ";" -f ${address_idx} <<< ${instance})"
       done
       ssh $(cut -d ";" -f ${address_idx} <<< ${instances[0]})
    fi
  fi
}

function __ec2sh_comp {
  local cur prev
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"

  [[ "${COMP_CWORD}" -eq 2 ]] && return 0

  local profile_list="$(__awskeys_list | grep "    ")"
  COMPREPLY=( $(compgen -W "${profile_list}" -- ${cur}) )

  return 0
}
complete -F __ec2sh_comp ec2sh


